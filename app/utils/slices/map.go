// Package slices provides utility functions for working with slices, such as converting slices to maps.
package slices

// ToMap converts a slice of elements into a map, using a provided key function
// to determine the keys for the map. Each element in the slice becomes a value
// in the resulting map, with its corresponding key determined by the keyFunc.
//
// Type Parameters:
//   - T: The type of elements in the input slice.
//   - K: The type of keys in the resulting map. Must be a comparable type.
//
// Parameters:
//   - slices: The input slice of elements to be converted into a map.
//   - keyFunc: A function that takes an element of type T and returns a key of type K.
//
// Returns:
//
//	A map where the keys are generated by applying keyFunc to each element of the slice,
//	and the values are the elements themselves.
//
// Example:
//
//	slices := []string{"apple", "banana", "cherry"}
//	keyFunc := func(s string) string { return s[:1] } // Use the first letter as the key
//	result := ToMap(slices, keyFunc)
//	// result: map[string]string{"a": "apple", "b": "banana", "c": "cherry"}
func ToMap[T any, K comparable](slices []T, keyFunc func(T) K) map[K]T {
	m := make(map[K]T)
	for _, item := range slices {
		m[keyFunc(item)] = item
	}
	return m
}
